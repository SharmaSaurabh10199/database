---> WHERE Clause
	-- The order of evaluations is as follows: from--> where--> select--> orderby 
	-- To form the condition in the WHERE clause, you use comparison and logical operators:

		-- Operator	Description
		-- =	Equal
		-- >	Greater than
		-- <	Less than
		-- >=	Greater than or equal
		-- <=	Less than or equal
		-- <> or !=	Not equal
		-- AND	Logical operator AND
		-- OR	Logical operator OR
		-- IN	Return true if a value matches any value in a list
		-- BETWEEN	Return true if a value is between a range of values
		-- LIKE	Return true if a value matches a pattern
		-- IS NULL	Return true if a value is NULL
		-- NOT	Negate the result of other operators
	select first_name, last_name from customer where first_name='kelly' and last_name ='brown'

---> LIKE 
	-- to find pattern 
	select * from customer where first_name like '%si%'
	

---> BETWEEN 
	select length(first_name) len from customer where len between 3 and 5 -- error as select is executed after where 
	select length(first_name) len from customer where length(first_name) between 3 and 5 


---> AND 
	--In PostgreSQL, a boolean value can have one of three values: true, false, and null
	--PostgreSQL uses true, 't', 'true', 'y', 'yes', '1' to represent true and false, 'f', 'false', 'n', 'no', and '0' to represent false

	select true and false as result
	select true and null as result --null
	select false and null as result --false
	select 't' and 'f' as res  		--false
	select '0' and '1' as res 		-- false
	-- similar is or 

---> LIMIT 
	--PostgreSQL LIMIT is an optional clause of the SELECT statement that constrains the number of rows returned by the query.
	SELECT
	  select_list
	FROM
	  table_name
	ORDER BY
	  sort_expression
	LIMIT
	  row_count;
	select * from customer where length(first_name) >2 order by first_name desc limit 10

---> OFFSET 
	-- Used to skip a no of rows 
	--If you want to skip a number of rows before returning the row_count rows, you can use OFFSET clause placed after the LIMIT clause:
	SELECT
	  select_list
	FROM
	  table_name
	ORDER BY
	  sort_expression
	LIMIT
	  row_count
	OFFSET
	  row_to_skip;
	--The statement first skips row_to_skip rows before returning row_count rows generated by the query.
	select * from customer where length(first_name) >2 order by first_name desc limit 10 offset 2



---> FETCH 
	--  similar to limit , its just used afeter offset while limite was used before offset 
	SELECT
    film_id,
	    title
	FROM
	    film
	ORDER BY
	    title
	OFFSET 5 ROWS  -- skips first 5 rows first
	FETCH FIRST 5 ROW ONLY; -- then takes nest rows 


---> IS NULL, IS Not NULL
	SELECT
	  address,
	  address2
	FROM
	  address
	WHERE
	  address2 IS NOT NULL;